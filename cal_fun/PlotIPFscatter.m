function PlotIPFscatter(app)
if isempty(app.test) || isempty(app.PloNo)  || isnan(app.PloNo)
    delete(app.IPFscatAxe.Children);
    app.IPFscatUic.Text.String = '';
    return
end
if app.SliTraFreFlag
   return 
end
delete(app.IPFscatAxe.Children)
if app.PloTyp == 2
    app.IPFscatUic.Text.String = '';
    return
end
theta = 0:0.01:2*pi;
r = ones(1,length(theta));
polarplot(app.IPFscatAxe,theta,r,'LineWidth',1,'Color','black');
polarplot(app.IPFscatAxe,[0,pi],[1,1],'LineWidth',0.5,'Color','black');
polarplot(app.IPFscatAxe,[pi/2,3*pi/2],[1,1],'LineWidth',0.5,'Color','black');

pos = app.UIAxes.CurrentPoint(1,1:2);
if pos(1)<app.UIAxes.XLim(1)||pos(1)>app.UIAxes.XLim(2)...
        ||pos(2)<app.UIAxes.YLim(1)||pos(2)>app.UIAxes.YLim(2)
    app.IPFscatUic.Text.String = '';
    legend off
    return
end
a = app.test(app.PloNo);
dis = vecnorm([a.X-pos(1),a.Y-pos(2)],2,2);
n = find(dis==min(dis));
n = n(1);
Angle = a.EulerAngles(n,:);
loc = [a.X(n),a.Y(n)];
str = {['X: ',num2str(loc(1),4),', Y: ',num2str(loc(2),4)], ...
    'Euler Angles: ',num2str(Angle(1),3),num2str(Angle(2),3),num2str(Angle(3),3)};
app.IPFscatUic.Text.String = str;
g = Euler_Matrix_1(Angle(1),Angle(2),Angle(3)); % sample -> crystal
switch app.PloTyp
    case 1
        SFs = a.SchmidtFactors(n,a.SelectedCategoryColumnInd{app.CatNo});
        SurfaceNormalVector = ...
            a.SelectedSurfaceNormal3Crystal ...
            (:,a.SelectedCategoryColumnInd{app.CatNo});
        DirectionVector = ...
            a.SelectedDirection3Crystal ...
            (:,a.SelectedCategoryColumnInd{app.CatNo});
        SurfaceNormalIndex = ...
            a.SelectedSurfaceNormal4Crystal ...
            (:,a.SelectedCategoryColumnInd{app.CatNo});
        DirectionNormalIndex = ...
            a.SelectedDirection4Crystal ...
            (:,a.SelectedCategoryColumnInd{app.CatNo});
    case 3
        SFs = a.MaximumSchmidtFactors(n,:);
        ind = cellfun(@(a)a(1),a.SelectedCategoryColumnInd) ...
            -1 + double(a.MaximumSchmidtFactorsIndex(n,:));
        SurfaceNormalVector = a.SelectedSurfaceNormal3Crystal(:,ind);
        DirectionVector = a.SelectedDirection3Crystal(:,ind);
        SurfaceNormalIndex = a.SelectedSurfaceNormal4Crystal(:,ind);
        DirectionNormalIndex = a.SelectedDirection4Crystal(:,ind);
end
ind = SurfaceNormalVector(3,:)<0;
SurfaceNormalVector(:,ind) = -SurfaceNormalVector(:,ind);
ind = DirectionVector(3,:)<0;
DirectionVector(:,ind) = -DirectionVector(:,ind);
OtherSurfNormalVectorCrystal = [];
OtherDirectionVectorCrystal = [];
if ~isempty(app.IPFscatFig.UserData.VecSampleData)
    OtherVectorSample = app.IPFscatFig.UserData.VecSampleData';
    OtherVectorCrystal = g * OtherVectorSample;
    SurfInd = cellfun(@(str)strcmp(str(1),'N'),app.IPFscatUic.ListBox.String);
    OtherSurfNormalVectorCrystal = OtherVectorCrystal(:,SurfInd);
    ind = OtherSurfNormalVectorCrystal(3,:)<0;
    OtherSurfNormalVectorCrystal(:,ind) = -OtherSurfNormalVectorCrystal(:,ind);
    OtherSurfNormalName = app.IPFscatUic.ListBox.String(SurfInd);
    OtherDirectionVectorCrystal = OtherVectorCrystal(:,~SurfInd);
    ind = OtherDirectionVectorCrystal(3,:)<0;
    OtherDirectionVectorCrystal(:,ind) = -OtherDirectionVectorCrystal(:,ind);
    OtherDirectionName = app.IPFscatUic.ListBox.String(~SurfInd);
end

Colors = colororder;

if app.IPFscatUic.Checkboxes(1).Value % surface pole
    [theta,rho] = cart2pol(SurfaceNormalVector(1,:),SurfaceNormalVector(2,:));
    R = rho./(1+SurfaceNormalVector(3,:));
    for i = 1:length(theta)
        scatter(app.IPFscatAxe, ...
            theta(i),R(i), ...
            max([1000*SFs(i),1e-2]), ...
            'r', ...
            'Marker','o', ...
            'LineWidth',1);
        temp=arrayfun(@(num)num2str(num), ...
            SurfaceNormalIndex(:,i),'UniformOutput',false);
        text(app.IPFscatAxe, ...
            theta(i),1.2*R(i), ...
            [temp{:}], ...
            'FontName','Times New Roman', ...
            'FontSize',12)
    end
    if ~isempty(OtherSurfNormalVectorCrystal)
        [theta,rho] = cart2pol( ...
            OtherSurfNormalVectorCrystal(1,:), ...
            OtherSurfNormalVectorCrystal(2,:));
        R = rho./(1+OtherSurfNormalVectorCrystal(3,:));
        for i = 1:length(theta)
            scatter(app.IPFscatAxe, ...
                theta(i),R(i), ...
                30, ...
                Colors(i,:), ...
                'filled');
            text(app.IPFscatAxe, ...
                theta(i),0.07+R(i), ...
                OtherSurfNormalName{i}, ...
                'Color',Colors(i,:), ...
                'FontName','Times New Roman', ...
                'FontSize',12)
        end
    end
end
if app.IPFscatUic.Checkboxes(2).Value % surface trace
    for i = 1:1:size(SurfaceNormalVector,2)
        [theta,R] = getSurfTrace( ...
            SurfaceNormalVector(1,i), ...
            SurfaceNormalVector(2,i), ...
            SurfaceNormalVector(3,i));
        polarplot(app.IPFscatAxe, ...
            theta,R, ...
            'LineWidth',max([SFs(i)*8,1e-3]), ...
            'Color','r');
    end
    for i = 1:1:size(OtherSurfNormalVectorCrystal,2)
        [theta,R] = getSurfTrace( ...
            OtherSurfNormalVectorCrystal(1,i), ...
            OtherSurfNormalVectorCrystal(2,i), ...
            OtherSurfNormalVectorCrystal(3,i));
        polarplot(app.IPFscatAxe, ...
            theta,R, ...
            'LineWidth',1.5, ...
            'Color',Colors(i,:));
    end
end
if app.IPFscatUic.Checkboxes(3).Value % direction
    [theta,rho] = cart2pol(DirectionVector(1,:),DirectionVector(2,:));
    R = rho./(1+DirectionVector(3,:));
    for i = 1:length(theta)
        scatter(app.IPFscatAxe, ...
            theta(i),R(i), ...
            max([1000*SFs(i),1e-2]), ...
            'r', ...
            'Marker','o', ...
            'LineWidth',1);
        temp=arrayfun(@(num)num2str(num), ...
            DirectionNormalIndex(:,i),'UniformOutput',false);
        text(app.IPFscatAxe, ...
            theta(i),1.2*R(i), ...
            [temp{:}], ...
            'FontName','Times New Roman', ...
            'FontSize',12)
    end
    if ~isempty(OtherDirectionVectorCrystal)
        [theta,rho] = cart2pol( ...
            OtherDirectionVectorCrystal(1,:), ...
            OtherDirectionVectorCrystal(2,:));
        R = rho./(1+OtherDirectionVectorCrystal(3,:));
        OtherSurfNormalNumber = length(OtherSurfNormalName);
        for i = 1:length(theta)
            scatter(app.IPFscatAxe, ...
                theta(i),R(i), ...
                30, ...
                Colors(OtherSurfNormalNumber+i,:), ...
                'filled');
            text(app.IPFscatAxe, ...
                theta(i),0.05+R(i), ...
                OtherDirectionName{i}, ...
                'Color',Colors(OtherSurfNormalNumber+i,:), ...
                'FontName','Times New Roman', ...
                'FontSize',12)
        end
    end
end


end
function [theta,R] = getSurfTrace(d1,d2,d3)
    x = -1:0.001:1;
    if d3~=0
        delta = 1-d1^2-x.^2;
        ind = delta>=0;
        x = x(ind);
        delta = delta(ind);
        y = [(-d1*d2*x+d3*sqrt(delta)),flip((-d1*d2*x-d3*sqrt(delta)))]/(1-d1^2);
        x1 = [x,flip(x),x(1)];
        y1 = [y,y(1)];
        z1 = -(d1*x1+d2*y1)/d3;
        ind = z1>=0;
        x1 = x1(ind); y1 = y1(ind); z1 = z1(ind);
    else
        x1 = x;
        y1 = -d1/d2*x;
        z1 = sqrt(1-x1.^2-y1.^2);
        z1 = real(z1);
    end
    [theta,rho] = cart2pol(x1,y1);
    R = rho./(1+z1);
    [theta,I] = sort(theta);
    R = R(I);
    theta1 = theta;
    dd = abs(diff(theta1));
    ind = find(dd==max(dd));
    if max(dd)>0.3
        theta = [theta(ind+1:end),theta(1:ind-1)];
        R = [R(ind+1:end),R(1:ind-1)];
    end
end